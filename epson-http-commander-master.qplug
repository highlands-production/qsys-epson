PluginInfo = {
	Name = "Epson Projector HTTP Commander", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "1.0.1",
	Id = "f54c2944-e218-11ea-87d0-0242ac130004", -- show this is just a unique id. It could even be something like "Im_sUpEr_UnIqUe"
	Description = "Allows for one-off Epson projector http commands",
	ShowDebug = true,
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	White = {255,255,255},
	Black = {0,0,0},
	Red = {255,0,0},
	Green = {0,255,0},
}

function GetColor(props)
  return { 102, 102, 102 }
end

function GetPrettyName(props)
  return PluginInfo.Description .. " " .. PluginInfo.Version
end

local pagenames = {"Lens Preset", "Geo Presets", "Settings"}

function GetPages(props)
  pages = {}

    for ix, name in ipairs(pagenames) do
      table.insert(pages, {
        name = pagenames[ix]
      })
    end

  return pages
end

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
-- Each property can have:
-- Name = string (text displayed next to property)
-- Type = string, integer, double, boolean, enum
-- Value = default value for property
-- Enum type has Choices i.e. Choices = { list of choice strings } which displays in a combobox
-- Integer and Double types have a Min (lowest extent) and Max (highest extent) value that needs to be defined
function GetProperties()
  props = {}


  return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle, Trigger, 'On', 'Off', or Custom. Custom is for a String type button
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text, or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position, or Seconds
-- Controls with a ControlUnit will need a Min and Max value specified
function GetControls(props)
  ctrls = {}

    local lens_count = 10
    local geo_count = 10
  
    -- Lens Preset
    table.insert(ctrls, {
      Name = "LensPresetTrigger",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Both",
      Count = lens_count,
    })
  
    -- Geo page
    table.insert(ctrls, {
      Name = "GeoPresetTrigger",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Both",
      Count = geo_count,
    })
  
    -- Settings page
    table.insert(ctrls, {
      Name = "Status",
      ControlType = "Indicator",
      IndicatorType = "Status",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "IPAddress",
      ControlType = "Text",
      UserPin = false,
      PinStyle = "None",
      Count = 1,
    })
    table.insert(ctrls, {
      Name = "User",
      ControlType = "Text",
      UserPin = false,
      PinStyle = "None",
      Count = 1,
    })
    table.insert(ctrls, {
      Name = "Pass",
      ControlType = "Text",
      UserPin = false,
      PinStyle = "None",
      Count = 1,
    })
    table.insert(ctrls, {
      Name = "Connect",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })

  return ctrls
end

function GetControlLayout(props)
  layout   = {}
  graphics = {}

  -- Since our plugin has multiple pages, we need to define some variables to help us dynamically draw the UI based on page and property selections
  local CurrentPage = pagenames[props["page_index"].Value] -- This variable can be used to only draw the ctls you want on that page
  
  if CurrentPage == "Lens Preset" then
    local size_pad = 85
  
  	local lens_preset_counts = 10
    for i = 1, lens_preset_counts do
      -- If there is only 1 contorl, it'll be Controls["X"], otherwise Controls["X"][y]... this "solves" that issue; use layout[xxxx]
      local ctl_str = tostring(lens_preset_counts == 1 and "" or " " .. i)
      local left_pad = (size_pad * (i - 1));
  
      layout["LensPresetTrigger" .. ctl_str] = {
        PrettyName = string.format("Lens~Number %i~Trigger", i),
        Style = "Button",
        ButtonStyle = "Trigger",
        Size = {75, 20},
        Position = {10 + left_pad, 50},
      }
    end
  elseif CurrentPage == "Geo Presets" then
    local size_pad = 85
  
  	local geo_preset_counts = 10
    for i = 1, geo_preset_counts do
      -- If there is only 1 contorl, it'll be Controls["X"], otherwise Controls["X"][y]... this "solves" that issue; use layout[xxxx]
      local ctl_str = tostring(geo_preset_counts == 1 and "" or " " .. i)
      local left_pad = (size_pad * (i - 1));
  
      layout["GeoPresetTrigger" .. ctl_str] = {
        PrettyName = string.format("Geo~Number %i~Trigger", i),
        Style = "Button",
        ButtonStyle = "Trigger",
        Size = {75, 20},
        Position = {10 + left_pad, 50},
      }
    end
  elseif CurrentPage == "Settings" then
    layout["IPAddress"] = {
      PrettyName = "IP Address",
      Size = {90, 20},
      Position = {95, 10},
    }
    layout["User"] = {
      PrettyName = "Username",
      Size = {90, 20},
      Position = {95, 40},
    }
    layout["Pass"] = {
      PrettyName = "Password",
      Size = {90, 20},
      Position = {95, 70},
    }
    layout["Connect"] = {
      PrettyName = "Connect",
      Legend = "Connect",
      Size = {90, 20},
      Position = {95, 100},
    }
    layout["Status"] = {
      PrettyName = "Status",
      Size = {90, 20},
      Position = {95, 130},
    }
  
    graphics = {
      {
        Type = "Text",
        Text = "Host",
        Font = "Roboto",
        FontSize = 10,
        HTextAlign = "Right",
        Color = Colors.Black,
        Position = {10, 10},
        Size = {70, 20}
      },
  		{
        Type = "Text",
        Text = "User",
        Font = "Roboto",
        FontSize = 10,
        HTextAlign = "Right",
        Color = Colors.Black,
        Position = {10, 40},
        Size = {70, 20}
      },
  		{
        Type = "Text",
        Text = "Pass",
        Font = "Roboto",
        FontSize = 10,
        HTextAlign = "Right",
        Color = Colors.Black,
        Position = {10, 70},
        Size = {70, 20}
      },
      {
        Type = "Text",
        Text = "Status",
        Font = "Roboto",
        FontSize = 10,
        HTextAlign = "Right",
        Color = Colors.Black,
        Position = {10, 130},
        Size = {70, 20}
      },
    }
  end

  return layout, graphics
end

--Start event based logic
if Controls then

  --[[ Runtime File Contents ]]
  
  local config = {}
  local debug = {
    Connection = true
  }
  
  -------- QSys Code
  function start()
    if Controls.Connect.Value == 1 then
      if debug.Connection then print ("Starting the connection...") end
      disableConConfig(true)
  
      config = {
        base_url = Controls.IPAddress.String,
        username = Controls.User.String,
        password = Controls.Pass.String,
        qsys = true,
        debug = debug.Connection
      }
    else
      if debug.Connection then print ("Stopping the connection...") end
      disableConConfig(false)
    end
  end
  
  function disableConConfig(disabled)
    Controls.IPAddress.IsDisabled = disabled
    Controls.User.IsDisabled = disabled
    Controls.Pass.IsDisabled = disabled
    Controls.Connect.Legend = disabled and "Disconnect" or "Connect"
  end
  
  local status_states = {
    OK = 0,
    COMPROMISED = 1,
    FAULT = 2,
    NOTPRESENT = 3,
    MISSING = 4,
    INITIALIZING = 5
  }
  
  function setStatus(key, message)
    Controls.Status.Value = status_states[key]
    Controls.Status.String = message == nil and "" or message
  end
  
  function watchBtns()
  	for i, v in ipairs(Controls["GeoPresetTrigger"]) do
  		v.EventHandler = function()
  			EpsonPjCommander.recallGeoPreset(i)
  		end
  	end
  
  	for i, v in ipairs(Controls["LensPresetTrigger"]) do
  		v.EventHandler = function()
  			EpsonPjCommander.recallLensPreset(i)
  		end
  	end
  end
  
  --------- core code
  
    EpsonPjCommander = {
        TIMEOUT = 3
    }
    
    function EpsonPjCommander.recallGeoPreset(number)
    	EpsonPjCommander.makeRequest('/cgi-bin/directsend?POPGC=' .. string.format("%02d", number))
    end
    
    function EpsonPjCommander.recallLensPreset(number)
    	EpsonPjCommander.makeRequest('/cgi-bin/directsend?POPLP=' .. string.format("%02d", number))
    end
    
    function EpsonPjCommander.makeRequest(params)
        local url = 'https://' .. config.base_url .. '/' .. params
    
        if config.debug then print(url) end
    
    		local request = {
    			Url = url,
    			User = config.username,
    			Password = config.password,
    			Auth = "digest",
    			Headers = {
    				["Referer"] = 'https://' .. config.base_url,
    			},
    			Timeout = EpsonPjCommander.TIMEOUT,
    			EventHandler = function(table, code, data, errorz, headers)
    				print ("Returned: " .. code)
    			end
    		}
    
    		HttpClient.Download(request)
    end
  
  Controls.Connect.EventHandler = start
  watchBtns()
  start()

end
